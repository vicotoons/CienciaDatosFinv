# =================================================================================
#                         STREAMLIT SCRIPT CONSOLIDADO
# =================================================================================

# ---------- IMPORTACIONES NECESARIAS ------------------
import streamlit as st
import pandas as pd
import joblib
import os
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# Deshabilita las opciones de optimizaci√≥n de OneDNN para compatibilidad
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

# ================================================================================
#                             1. CONFIGURACI√ìN INICIAL
# ================================================================================
st.set_page_config(layout="wide", page_title="Dashboard de Proyectos de IA")

# ==============================
# CARGA DE MODELOS CON @st.cache_resource
# ==============================
@st.cache_resource
def load_vision_model_tflite():
    """Carga el modelo de visi√≥n por computadora en formato TFLite."""
    try:
        interpreter = tf.lite.Interpreter(model_path="model_unquant.tflite")
        interpreter.allocate_tensors()
        return interpreter
    except FileNotFoundError:
        st.error("‚ùå Error: 'model_unquant.tflite' no se encontr√≥. Aseg√∫rate de que est√© en la misma carpeta.")
        return None
    except Exception as e:
        st.error(f"‚ùå Error al cargar el modelo de visi√≥n: {e}")
        return None

@st.cache_resource
def load_beer_model():
    """Carga el modelo de predicci√≥n de cerveza."""
    try:
        modelo = joblib.load("modelo_beer.joblib")
        return modelo
    except FileNotFoundError:
        st.error("‚ùå Error: 'modelo_beer.joblib' no se encontr√≥.")
        return None
    except Exception as e:
        st.error(f"‚ùå Error al cargar el modelo de cerveza: {e}")
        return None

@st.cache_resource
def load_rf_model():
    """Carga el modelo de Random Forest para el Titanic."""
    try:
        modelo = joblib.load("rf_model.joblib")
        return modelo
    except FileNotFoundError:
        st.error("‚ùå Error: 'rf_model.joblib' no se encontr√≥. Aseg√∫rate de que el archivo est√© en la misma carpeta.")
        return None
    except Exception as e:
        st.error(f"‚ùå Error al cargar el modelo de Random Forest: {e}")
        return None

# Cargar los modelos al inicio
vision_model_tflite = load_vision_model_tflite()
beer_model = load_beer_model()
rf_model = load_rf_model()

# ==============================
# OTRAS CONFIGURACIONES
# ==============================
class_labels = ["Apple___Podrido", "Apple___Saludable", "Apple___Sarnoso"]
temp_dir = "temp"
os.makedirs(temp_dir, exist_ok=True)

# ================================================================================
#                             2. FUNCIONES DE PROCESAMIENTO
# ================================================================================
def classify_image_tflite(image_path: str, interpreter):
    """Procesa y clasifica una imagen con el modelo TFLite."""
    img = Image.open(image_path).convert("RGB")
    img_resized = ImageOps.fit(img, (224, 224), Image.Resampling.LANCZOS)
    img_array_resized = np.asarray(img_resized)
    normalized_image_array = (img_array_resized.astype(np.float32) / 127.5) - 1
    
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    input_shape = input_details[0]['shape']
    data = np.ndarray(shape=input_shape, dtype=np.float32)
    data[0] = normalized_image_array

    interpreter.set_tensor(input_details[0]['index'], data)
    interpreter.invoke()
    pred = interpreter.get_tensor(output_details[0]['index'])
    
    return pred[0]

# ================================================================================
#                             3. INTERFAZ DE STREAMLIT
# ================================================================================
st.sidebar.title("Men√∫")
option = st.sidebar.radio(
    "Selecciona una Opci√≥n:",
    ("Predicci√≥n de Cerveza", "Visi√≥n por computadora", "Random Forest")
)

# ---
### Secci√≥n 1: Predicci√≥n de Cerveza
if option == "Predicci√≥n de Cerveza":
    if beer_model is None:
        st.stop()
    st.title("üç∫ Predicci√≥n de Producci√≥n de Cerveza")
    st.write("Introduce los valores para generar una predicci√≥n:")

    with st.form("beer_form"):
        year = st.number_input("A√±o", min_value=1956, max_value=2100, value=2025, step=1)
        month = st.selectbox("Mes", list(range(1, 13)), index=0)
        lag_1 = st.number_input("Producci√≥n del mes anterior", min_value=0.0, value=100.0)
        lag_12 = st.number_input("Producci√≥n hace 12 meses", min_value=0.0, value=110.0)
        lag_24 = st.number_input("Producci√≥n hace 24 meses", min_value=0.0, value=115.0)
        rolling_mean_12 = st.number_input("Media m√≥vil 12 meses", min_value=0.0, value=105.0)
        submitted = st.form_submit_button("üîÆ Predecir")

    if submitted:
        X_new = pd.DataFrame({
            "month": [month], "year": [year], "lag_1": [lag_1],
            "lag_12": [lag_12], "lag_24": [lag_24], "rolling_mean_12": [rolling_mean_12]
        })
        pred = beer_model.predict(X_new)[0]
        st.success(f"Predicci√≥n de producci√≥n: **{pred:.2f}**")

# ---
### Secci√≥n 2: Visi√≥n por Computadora
elif option == "Visi√≥n por computadora":
    if vision_model_tflite is None:
        st.stop()
        
    st.title("üñºÔ∏è Visi√≥n por Computadora")
    st.write("Sube una imagen para clasificarla.")
    uploaded_file = st.file_uploader("Sube una imagen", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        temp_path = os.path.join(temp_dir, uploaded_file.name)
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.read())
        
        st.image(uploaded_file, caption="Imagen seleccionada", use_container_width=True)

        try:
            pred = classify_image_tflite(temp_path, vision_model_tflite)
            predicted_class = np.argmax(pred)
            predicted_probability = pred[predicted_class]

            color = "red" if "Podrido" in class_labels[predicted_class] or "Sarnoso" in class_labels[predicted_class] else "green"
            message = f'<p style="color: {color}; font-size: 24px;">La imagen es <b>{class_labels[predicted_class]}</b> con una probabilidad de {predicted_probability:.3f}</p>'
            st.markdown(message, unsafe_allow_html=True)
        finally:
            os.remove(temp_path)

# ---
### Secci√≥n 3: Random Forest
elif option == "Random Forest":
    if rf_model is None:
        st.stop()
        
    st.title("üö¢ Predicci√≥n de Supervivencia en el Titanic")
    st.write("Introduce los datos de un pasajero para predecir si sobrevivi√≥.")
    
    with st.form("titanic_form"):
        pclass = st.selectbox("Clase del billete", options=[1, 2, 3], index=0)
        sex = st.selectbox("Sexo", options=["male", "female"], index=0)
        age = st.slider("Edad", min_value=0, max_value=100, value=30, step=1)
        sibsp = st.number_input("N√∫mero de hermanos/c√≥nyuges a bordo ", min_value=0, value=0)
        parch = st.number_input("N√∫mero de padres/hijos a bordo ", min_value=0, value=0)
        fare = st.number_input("Tarifa del billete (7.25,71.2833,146.5208,262.375)", min_value=0.0, value=50.0)
        embarked = st.selectbox("Puerto de embarque ", options=["S", "C", "Q"], index=0)
        
        submitted = st.form_submit_button("üîÆ Predecir")

        if submitted:
            input_df = pd.DataFrame([{
                'Pclass': pclass,
                'Sex': sex,
                'Age': age,
                'SibSp': sibsp,
                'Parch': parch,
                'Fare': fare,
                'Embarked': embarked
            }])
            
            input_df['Sex'] = input_df['Sex'].map({'male': 1, 'female': 0})
            input_df['Embarked'] = input_df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})

            prediction = rf_model.predict(input_df)
            
            if prediction[0] == 1:
                st.success("¬°El pasajero **sobrevivi√≥**! üéâ")
            else:
                st.error("El pasajero **no sobrevivi√≥**. üòî")